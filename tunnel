#!/bin/bash

set -e # exit on error

cd `dirname $0`
source .default.sh
pidfile=tunnel-${CHISEL_LOCAL_PORT}.pid

stopTunnel() {
  if [ -r "$pidfile" ]; then
    pid=$(cat "$pidfile")

    # Note ps will exit non-0 if $pid isn't running
    if ps -p $pid | grep -q chisel; then
      echo stopping tunnel
      kill $pid
    fi
    rm "$pidfile"
  fi
}

dropTunnel() {
  stopTunnel
  cf delete -f $CHISEL_APP_NAME
}

restartTunnel() {
  echo "Restarting $CHISEL_APP_NAME"
  cf restart $CHISEL_APP_NAME
}

case $1 in
  start)    ;; # Just run the script...
  restart)  restartTunnel;; # Restart the app, then run the script
  stop)     stopTunnel; exit ;;
  drop)     dropTunnel; exit ;;
esac

echo "Starting $CHISEL_APP_NAME forwarding local port $CHISEL_LOCAL_PORT to remote port $CHISEL_REMOTE_PORT"

# Make sure that app is running
./push.sh -t $@

echo "Obtaining url for $CHISEL_APP_NAME"
url=`cf app $CHISEL_APP_NAME | egrep 'routes|urls' | awk '{print $2}'`

# Sanity-check the URL. This is kinda important because the chisel client
# doesn't complain if it can't connect. :(
echo "$url" | grep "$CHISEL_APP_NAME" | grep -q predix.io || { echo "URL doesn't look sane: $url"; exit 2; }

# If there's an existing client running, kill it
stopTunnel

echo "Starting client, connecting to $url"
cmd="./chisel client --keepalive 10s https://$url ${CHISEL_LOCAL_PORT}:${CHISEL_REMOTE_PORT}"
echo "Running in background: $cmd"
$cmd > /dev/null &
echo $! > "$pidfile"

cat <<_EOF_
You can now connect via

ssh vcap@localhost -p ${CHISEL_LOCAL_PORT}

or **IF** you added an entry to ~/.ssh/config:

ssh chisel

_EOF_

# vi: expandtab sw=2 ts=2
